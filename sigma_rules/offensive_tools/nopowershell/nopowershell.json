[
    {
        "keyword": "*\\WriteOutputCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetRemoteSmbShareCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*bofnet.cna*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetChildItemCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetLocalGroupMemberCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\NoPowerShell*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetCommandCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*NoPowerShell64.dll*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*555AD0AC-1FDB-4016-8257-170A74CB2F55*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetWmiObjectCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*bitsadmin/nopowershell*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*BOFNET.Bofs.Jobs*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetDnsClientCacheCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*/nopowershell.git*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*\\GetADGroupCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetSmbMappingCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetHelpCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetContentCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*NoPowerShell_trunk.zip*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*\\GetLocalUserCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\WhereObjectCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetNetTCPConnectionCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\DllExport.bat*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*/NoPowerShell/*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*\\FormatListCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetADGroupMemberCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\Windows\\System32\\nc.exe*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*bofnet_execute.cpp.x64.obj*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*NoPowerShell.Commands*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*bofnet_execute.cpp.x86.obj*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*\\GetComputerInfoCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\InvokeWmiMethodCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetADTrustCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\RemoveItemCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetNetRouteCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\ExpandArchiveCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\MeasureObjectCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\StopProcessCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*nps whoami*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*bofnet_load *",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*NoPowerShell.dll*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*GetWhoamiCommand.cs*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetNetIPAddressCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetProcessCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\Tmp\\nc.exe*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\CompressArchiveCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*bofnet_execute.cpp*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetSmbShareCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\SetClipboardCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\FormatTableCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\SortObjectCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetItemPropertyCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*NoPowerShellDll.*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetItemPropertyValueCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\ResolveDnsNameCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\InvokeWebRequestCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*== NoPowerShell v* ==*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetClipboardCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*NoPowerShell.sln*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*\\GetADUserCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetHotFixCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetLocalGroupCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\OutFileCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetWinStationCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*NoPowerShell.exe*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*NoPowerShell32.dll*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*NoPowerShell.Commands.Management*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\CopyItemCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*bofnet_execute *",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\TestNetConnectionCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*BOFNET.dll*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*\\ExportCsvCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetADObjectCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetPSDriveCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\Tmp\\netcat.exe*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*https://github.com/bitsadmin/*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*NoPowerShell.csproj*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\GetWhoamiCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*\\SelectObjectCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*bofnet_execute.cpp.x64.obj*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*PublicKeyToken=8337224c9ad9e356*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*NoPowerShell.cna*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": true
    },
    {
        "keyword": "*\\GetNetNeighborCommand.cs",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    },
    {
        "keyword": "*bofnet_execute.cpp.x86.obj*",
        "description": "NoPowerShell is a tool implemented in C# which supports executing PowerShell-like commands while remaining invisible to any PowerShell logging mechanisms. This .NET Framework 2 compatible binary can be loaded in Cobalt Strike to execute commands in-memory. No System.Management.Automation.dll is used. only native .NET libraries. An alternative usecase for NoPowerShell is to launch it as a DLL via rundll32.exe: rundll32 NoPowerShell.dll.main.",
        "tool_name": "nopowershell",
        "reference": "https://github.com/bitsadmin/nopowershell",
        "severity": "10",
        "popularity": "10",
        "keyword_type": "offensive_tool_keyword",
        "comment": "N/A",
        "tactics": "TA0002 - TA0003 - TA0005",
        "techniques": "T1059 - T1086 - T1500 - T1564 - T1127 - T1027",
        "endpoint_detection": true,
        "network_detection": false
    }
]